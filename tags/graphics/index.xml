<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Graphics - Tag - Robear Selwans' Portfolio</title><link>https://mo7sen.github.io/tags/graphics/</link><description>Graphics - Tag - Robear Selwans' Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>robear.selwans@outlook.com (Robear Selwans)</managingEditor><webMaster>robear.selwans@outlook.com (Robear Selwans)</webMaster><lastBuildDate>Sat, 31 Jul 2021 13:25:24 +0000</lastBuildDate><atom:link href="https://mo7sen.github.io/tags/graphics/" rel="self" type="application/rss+xml"/><item><title>ImprovGFX</title><link>https://mo7sen.github.io/projects/improvgfx/</link><pubDate>Sat, 31 Jul 2021 13:25:24 +0000</pubDate><author>robear.selwans@outlook.com (Robear Selwans)</author><guid>https://mo7sen.github.io/projects/improvgfx/</guid><description>Introduction For the “Computer Graphics” course, it was announced from the beginning of the course that the final project will be a scene rendered using OpenGL or WebGL. However, for someone like me who’s been introduced to what graphics programming is (with no actual experience), I thought it would be way cooler to build my own offline renderer. The only reason I was confident enough to ask the professor if I could make this project instead is because of ssloy’s tiny-renderer tutorial series.</description></item><item><title>RusTracer</title><link>https://mo7sen.github.io/projects/rustracer/</link><pubDate>Sat, 31 Jul 2021 13:25:24 +0000</pubDate><author>robear.selwans@outlook.com (Robear Selwans)</author><guid>https://mo7sen.github.io/projects/rustracer/</guid><description>In an effort to learn about ray tracing, I decided to follow ssloy’s tinyraytracer tutorial which is, in my opinion, a very gentle introduction into the world of raytracing. Despite the tutorial using C++, I decided to use Rust for no reason except that I hadn’t written any Rust code in a while and felt a bit rusty (pun intended).
Another thing that I did differently from the tutorial is that I rendered to an SDL window instead of rendering to an image.</description></item><item><title>evol-renderer</title><link>https://mo7sen.github.io/projects/evol-renderer/</link><pubDate>Sat, 31 Jul 2021 13:25:00 +0000</pubDate><author>robear.selwans@outlook.com (Robear Selwans)</author><guid>https://mo7sen.github.io/projects/evol-renderer/</guid><description>Introduction The rendering module is one of the more special modules; this is mainly because dependencies were kept to a minimum and extra effort was put to ensure that most of the module was actually built from scratch.
Implementation For the graphics API, we used Vulkan. This decision was quite easy to take actually as DirectX wasn’t natively supported in linux and OpenGL wouldn’t provide any experience when it comes to newer graphics APIs which are way more verbose and provide more control over almost everything.</description></item></channel></rss>